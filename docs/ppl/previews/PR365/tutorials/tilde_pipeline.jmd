---
title: Hooking into the Tilde Pipeline
---

As mentioned previously, DynamicPPL is a tracing, procedural, and multiple dispatch-oriented PPL. This means we pull information about a model by running it.

Importance sampling works by drawing samples from the prior, then reweighting those samples according to their likelihood to create a sample that matches the posterior. If a random sample $i$ has a likelihood of $p_i$, then the importance weight for that sample is $p_i / \sum_i p_i$.
```@example
function DynamicPPL.assume(rng, spl::Sampler{<:IS}, dist::Distribution, vn::VarName, vi)
    if haskey(vi, vn)
        r = vi[vn]
    else
        r = rand(rng, dist)
        vi = push!!(vi, vn, r, dist, spl)
    end
    return r, 0, vi
end

function DynamicPPL.observe(spl::Sampler{<:IS}, dist::Distribution, value, vi)
    return logpdf(dist, value), vi
end
```


This implementation of Importance Sampling uses the model prior distribution as a proposal distribution, and so we need samples from the prior. How can we get this? 

```@example
using Random, DynamicPPL, Turing

@model function gdemo()
    σ² ~ InverseGamma(2, 3)
    μ ~ Normal(0, sqrt(σ²))
    x .~ Normal(m, sqrt(σ²))
end

chn = sample(gdemo(randn(rng, 10)), IS(), 1_000)
```

What this means is that for importance sampling, we want to run a model in a way that treats a `~` differently depending on whether it's part of the prior or the likelihood. We can do this with the procedural interface.
