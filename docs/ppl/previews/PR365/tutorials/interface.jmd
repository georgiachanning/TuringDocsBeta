---
title: Sampler Interface
---

The interface for `sample` is designed to make sampling easy for users, but it can be confusing at first for developers. This tutorial will walk through the interface and how to add a new sampler, using Metropolis-Hastings as an example.


## Samplers

An `AbstractSampler` is an object that stores information about how the model and algorithm interact.

When you call `sample(mod, algorithm, n_samples)`, Turing first builds a sampler, then calls the AbstractMCMC function `sample(mod, sampler, n_samples)`.

So to add a Turing sampling method, you should start by building a `Sampler` constructor that takes a model and algorithm as input.
```@example
struct MHSampler{P} <: AbstractMCMC.AbstractSampler
    proposal::P
end
```


## How `sample` Works

An MCMC algorithm is just a series of steps, each producing one sample. The `sample` function works on the same principle -- it repeatedly calls `AbstractMCMC.step(rng, model, sampler, state)` before bundling the samples generated by `step`. Overloading `step` lets us implement different sampling algorithms. 

Each `step` should return a tuple `state, sample`. `state` can be anything, but should contain all the information required for the next sample; it will be passed to the next `step`.

Here's how we'd do this for Metropolis-Hastings:
```
function AbstractMCMC.step(
    rng::Random.AbstractRNG, model::DynamicPPL.Model, sampler::MHSampler, state;
    kwargs...
)
    # state is just a tuple containing the last sample and its log probability
    sample, logjoint_sample = state
    proposed = sampler.proposal(rng, sample)
    logjoint_proposed = logjoint(model, proposed)

    # decide whether to accept or reject the next proposal
    if logjoint_sample < logjoint_proposed + randexp(rng)
        sample = proposed
        logjoint_sample = logjoint_proposed
    end

    return sample, (sample, logjoint_sample)
end
```

Often we want to do some kind of set-up for the first step of a Markov Chain, which will be different from the other steps. We do this by defining a method with no `state` argument. For example, we can initialize the sampler by taking a random value from the prior with `rand`:
```@example
function AbstractMCMC.step(
    rng::Random.AbstractRNG, model::DynamicPPL.Model, sampler::MHSampler;
    init_from=rand(rng, model),  # `rand` draws a named tuple from the prior
    kwargs...
)
    state = (init_from, logjoint(model, init_from),)
    return AbstractMCMC.step(rng, model, sampler, state; kwargs...)
end
```
